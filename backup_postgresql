#!/bin/sh 
#####################################################################################################################
# DBP = Database Backup Postgresql                                                                                  #
# Write Ahead Log(WAL) (archiving for postgres)					                                                            #
# Backup script for full Postgres backup with wal files.                           			                            #
#####################################################################################################################

# After enter set -e in an interactive bash, bash will exit immediately if any command exits with non-zero
set -e

#functions that will be used

printHelp() {
    echo
    echo "Usage: backup_postgresql -i<instance name> -p<port number>"
    echo
    echo "  -i  Instance name "
    echo "  -p  Port number"
    echo "  -h  this help screen"
    echo
    echo "Example: backup_postgresql -itestdb -p5432"
    echo
}

# Checks command line options (pass $@ as parameter).
checkOptions() {
    if [ $# -eq 0 ]; then
        printHelp
        exit 3
    fi

    while getopts i:p:h: OPT $@; do
            case $OPT in
                i) # Instance name
                   INP="$OPTARG"
                   ;;
                p) # Port number
                   PORT="$OPTARG"
                   ;;
                h) printHelp
                   exit 3
                   ;;
            esac
    done

     if [ -z $INP ]; then
                echo "Instance name is not set"
                printHelp
                exit 3 

     elif [ $PORT -eq 0 ]; then
                echo "Port is not set"
                printHelp
                exit 3
     fi
}

get_timestamp () {
  date_str="`/bin/date +%d'-'%m'-'%Y`"
  time_str="`/bin/date +%H'_'%M'_'%S`"
  time_stamp="--> $date_str"_"$time_str <--"
  }

#function check options
checkOptions $@


#Set variables 
export PGINSTANCE=$INP
export PGHOST=`hostname`
export PGPORT=$PORT
export PGUSER=postgres
export PGDATA=9.3/data
export PGWAL=wal
export PGTABLESPACE=tablespaces
export LOGDIR=/var/log/postgres_backups
export BACKUP_LOG=$LOGDIR/pg_backup_${PGINSTANCE}_log
export BACKUPS=backups


if [ -f /var/lock/subsys/psql_backup_${PGINSTANCE}_in_progress ]; then
        echo "Backup already running, check /var/lock/subsys/psql_backup_${PGINSTANCE}_in_progress"
        exit
else
        /bin/touch /var/lock/subsys/psql_backup_${PGINSTANCE}_in_progress
fi

# Go to default directory
cd /var/lib/$PGINSTANCE

# Delete old backup log file.
rm -f $BACKUP_LOG*

# Get timestamp from function.
get_timestamp

# Set log file and touch.
LOGFILE=${BACKUP_LOG}_${date_str}_$time_str
/bin/touch $LOGFILE

# Delete old backups.
rm -f $BACKUPS/pg*
/bin/echo "Old backup(s) are deleted" >> $LOGFILE 2>&1

# base backup with wal files.
/bin/echo "Start Hot Backup" >> $LOGFILE 2>&1
/usr/bin/psql -U postgres -h $PGHOST -c "select pg_start_backup('Hot_Backup to /var/lib/$PGINSTANCE/backups');" >> $LOGFILE 2>&1

# Start tar of base dir and wal files
/bin/echo "Starting tar of base dir and wal files" >> $LOGFILE 2>&1
/bin/tar --exclude $PGDATA/pg_xlog -cvzpf $BACKUPS/pgbackup_"$date_str"_"$time_str".tgz $PGDATA/ $PGTABLESPACE/ >> $LOGFILE 2>&1
sleep 2
/bin/tar -cvzpf $BACKUPS/pgwals_"$date_str"_"$time_str".tgz $PGWAL/ >> $LOGFILE 2>&1

# Tar finished stop backup.
/usr/bin/psql -U postgres -h $PGHOST -c "select pg_stop_backup();" >> $LOGFILE 2>&1
/bin/echo "Tar of base dir and wal files is finished" >> $LOGFILE 2>&1

# Delete old wal file older then a day..
find /var/lib/$PGINSTANCE/wal/ -mtime +0 -exec rm -f {} \;
/bin/echo "Old wal files are deleted" >> $LOGFILE 2>&1

# Remove lock file
/bin/rm /var/lock/subsys/psql_backup_${PGINSTANCE}_in_progress
/bin/echo "Lock file removed" >> $LOGFILE 2>&1

# Inform log file that the script complete successfully.
/bin/echo "Backup script complete successfully" >> $LOGFILE 2>&1
